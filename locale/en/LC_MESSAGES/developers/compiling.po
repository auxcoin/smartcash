# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, SmartCash
# This file is distributed under the same license as the SmartCash package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SmartCash latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-16 21:11+0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../developers/compiling.rst:1
msgid ""
"Compile SmartCash NodeClient for Linux, macOS, Windows and deterministic "
"builds"
msgstr ""

#: ../../developers/compiling.rst:1
msgid ""
"smartcash, build, compile, linux, Jenkins, macOS, windows, binary, "
"gitian, developers"
msgstr ""

#: ../../developers/compiling.rst:9
msgid "Compiling SmartCash NodeClient"
msgstr ""

#: ../../developers/compiling.rst:11
msgid ""
"While SmartCash offers stable binary builds on the `website "
"<https://smartcash.cc/wallet>`_ and on `GitHub "
"<https://github.com/SmartCash/Core-Smart/releases/>`_, many users will "
"also be interested in building SmartCash binaries for themselves. This "
"process has been greatly simplified with the release of SmartCash "
"NodeClient 1.2.6 available on GitHub to compile or cross-compile "
"SmartCash for any platform."
msgstr ""

#: ../../developers/compiling.rst:18
msgid ""
"The instructions to build SmartCash NodeClient 1.2.6 or older are "
"available `here <https://github.com/SmartCash/Core-"
"Smart/tree/master/doc>`__ on a previous version of this page."
msgstr ""

#: ../../developers/compiling.rst:25
msgid "Gitian"
msgstr ""

#: ../../developers/compiling.rst:27
msgid ""
"Gitian is the deterministic build process that is used to build the "
"SmartCash Core executables. It provides a way to be reasonably sure that "
"the executables are really built from the source on GitHub. It also makes"
" sure that the same, tested dependencies are used and statically built "
"into the executable. Multiple developers build the source code by "
"following a specific descriptor (\"recipe\"), cryptographically sign the "
"result, and upload the resulting signature. These results are compared "
"and only if they match, the build is accepted and uploaded to "
"SmartCash.org."
msgstr ""

#: ../../developers/compiling.rst:36
msgid ""
"Instructions on how to build SmartCash NodeClient 1.2.6 will appear here "
"once the Docker build system for Gitian is available. Instructions to "
"create deterministic builds of SmartCash NodeClient 1.2.6 or older are "
"available `here <https://github.com/SmartCash/Core-Smart/blob/master/doc"
"/gitian-building.md>`__ on a previous version of this page."
msgstr ""

