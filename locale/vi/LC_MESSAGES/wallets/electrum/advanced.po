# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, SmartCash
# This file is distributed under the same license as the SmartCash package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SmartCash latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-16 16:45+0700\n"
"PO-Revision-Date: 2019-01-16 11:29+0000\n"
"Language-Team: Vietnamese (https://www.transifex.com/smartcash/teams/95224/vi/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: vi\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../wallets/electrum/advanced.rst:1
msgid ""
"Smartnodes, multisig, sweeping paper wallets, cold storage and command line "
"in the SmartCash Electrum wallet."
msgstr ""

#: ../../wallets/electrum/advanced.rst:1
msgid ""
"smartcash, wallet, electrum, smartnode, multisig, paper, cold storage, "
"command line"
msgstr ""

#: ../../wallets/electrum/advanced.rst:9
msgid "Advanced functions"
msgstr ""

#: ../../wallets/electrum/advanced.rst:11
msgid ""
"SmartCash Electrum is based on `Electrum <https://electrum.org>`_, a Bitcoin"
" wallet. Most functions are identical, which means it is not necessary to "
"reproduce the entirety of the Electrum documentation here. The following "
"sections describe some frequently used advanced functions. For further "
"details on other advanced functions in Electrum for both Bitcoin and "
"SmartCash, please click the links below."
msgstr ""

#: ../../wallets/electrum/advanced.rst:18
msgid "`Electrum documentation <http://docs.electrum.org>`_"
msgstr ""

#: ../../wallets/electrum/advanced.rst:19
msgid ""
"`Electrum seed version system "
"<http://docs.electrum.org/en/latest/seedphrase.html>`_"
msgstr ""

#: ../../wallets/electrum/advanced.rst:20
msgid ""
"`Electrum protocol specification "
"<http://docs.electrum.org/en/latest/protocol.html>`_"
msgstr ""

#: ../../wallets/electrum/advanced.rst:21
msgid ""
"`Serialization of unsigned or partially signed transactions "
"<http://docs.electrum.org/en/latest/transactions.html>`_"
msgstr ""

#: ../../wallets/electrum/advanced.rst:22
msgid ""
"`Simple Payment Verification <http://docs.electrum.org/en/latest/spv.html>`_"
msgstr ""

#: ../../wallets/electrum/advanced.rst:23
msgid ""
"`The Python Console <http://docs.electrum.org/en/latest/console.html>`_"
msgstr ""

#: ../../wallets/electrum/advanced.rst:24
msgid ""
"`Using Electrum Through Tor <http://docs.electrum.org/en/latest/tor.html>`_"
msgstr ""

#: ../../wallets/electrum/advanced.rst:27
msgid "Smartnodes in SmartCash Electrum"
msgstr ""

#: ../../wallets/electrum/advanced.rst:29
msgid ""
"SmartCash Electrum supports smartnode creation through an interface called "
"the **Smartnode Manager**."
msgstr ""

#: ../../wallets/electrum/advanced.rst:33
msgid "Smartnode Manager"
msgstr ""

#: ../../wallets/electrum/advanced.rst:35
msgid ""
"The Smartnode Manager can be accessed via Smartnodes tab. This manager "
"displays the status of your smartnode(s). A wallet with no Smartnodes will "
"begin with a default smartnode for which you can fill in the necessary "
"information."
msgstr ""

#: ../../wallets/electrum/advanced.rst:40
msgid ""
"The manager displays the following data about each smartnode you have set "
"up:"
msgstr ""

#: ../../wallets/electrum/advanced.rst:43
msgid "The alias (name) of the smartnode."
msgstr ""

#: ../../wallets/electrum/advanced.rst:44
msgid "The Address."
msgstr ""

#: ../../wallets/electrum/advanced.rst:45
msgid "The protocol version that your smartnode supports."
msgstr ""

#: ../../wallets/electrum/advanced.rst:46
msgid "The status of the smartnode (e.g. whether it has been activated)."
msgstr ""

#: ../../wallets/electrum/advanced.rst:47
msgid "The Payee."
msgstr ""

#: ../../wallets/electrum/advanced.rst:51
msgid "Smartnode setup"
msgstr ""

#: ../../wallets/electrum/advanced.rst:53
msgid ""
"A smartnode requires a \"smartnode\" key, which is known to both SmartCash "
"Electrum and your smartnode. Your smartnode will use this key to sign "
"messages, and the SmartCash network will know that you authorized it to. A "
"smartnode key can either be one of your SmartCash Electrum keys, or an "
"imported key."
msgstr ""

#: ../../wallets/electrum/advanced.rst:60
msgid "IP address and Alias"
msgstr ""

#: ../../wallets/electrum/advanced.rst:62
msgid ""
"Certain information about your smartnode is required. The IP address and "
"port that your smartnode uses must be supplied. Also, the Alias that your "
"smartnode. This information is filled in automatically if you import a "
"\"smartnode.conf\" file."
msgstr ""

#: ../../wallets/electrum/advanced.rst:70
msgid "Entering IP and Alias information"
msgstr ""

#: ../../wallets/electrum/advanced.rst:73
msgid "Collateral"
msgstr ""

#: ../../wallets/electrum/advanced.rst:75
msgid ""
"To start a smartnode, you must have a 10000 SMART payment available in your "
"wallet. You can scan your wallet for 10000 SMART payments in the **Create "
"Smartnode** tab of the Smartnode Manager."
msgstr ""

#: ../../wallets/electrum/advanced.rst:79
msgid ""
"After scanning, a list of available 10000 SMART collateral payments will be "
"displayed. Selecting one of them will cause the selected smartnode's data to"
" be filled in, though these changes won't be saved until you click the "
"**Save** button in the lower-right corner of the tab."
msgstr ""

#: ../../wallets/electrum/advanced.rst:87
msgid "Entering IP and alias"
msgstr ""

#: ../../wallets/electrum/advanced.rst:90
msgid "Activating your smartnode"
msgstr ""

#: ../../wallets/electrum/advanced.rst:92
msgid ""
"After selecting a collateral payment and specifying a delegate key, you can "
"activate your smartnode. Do this by clicking **Activate Smartnode** in the "
"**Activate Smartnode** tab of the Smartnode Manager. If the **Activate "
"Smartnode** button cannot be clicked, look at the message in the **Status** "
"bar. It will show you why your smartnode cannot be activated."
msgstr ""

#: ../../wallets/electrum/advanced.rst:99
msgid ""
"Activation will require your password if your wallet is encrypted, because a"
" message must be signed. After waiting for SmartCash Electrum to sign and "
"broadcast your smartnode announcement, you will be presented with a message "
"detailing the result. The status of your smartnode will be updated in the "
"table and the **View Smartnode** tab."
msgstr ""

#: ../../wallets/electrum/advanced.rst:108
msgid "Entering IP and protocol information"
msgstr ""

#: ../../wallets/electrum/advanced.rst:111
msgid "Importing smartnode.conf"
msgstr ""

#: ../../wallets/electrum/advanced.rst:113
msgid ""
"You can import a *smartnode.conf* file using the **Smartnode.conf** tab of "
"the Smartnode Manager. This is the recommended way of setting up Smartnodes,"
" as it allows you to configure Smartnodes for SmartCash Core and SmartCash "
"Electrum in the same way. Importing a *smartnode.conf* file will "
"automatically set up one or more smartnode configurations in the Smartnode "
"Manager."
msgstr ""

#: ../../wallets/electrum/advanced.rst:121
msgid "Multisig wallets"
msgstr ""

#: ../../wallets/electrum/advanced.rst:123
msgid ""
"This tutorial shows how to create a 2 of 2 multisig wallet. A 2 of 2 "
"multisig consists of 2 separate wallets (usually on separate machines and "
"potentially controlled by separate people) that have to be used in "
"conjunction in order to access the funds. Both wallets have the same set of "
"addresses."
msgstr ""

#: ../../wallets/electrum/advanced.rst:129
msgid ""
"A common use-case for this is if you want to collaboratively control funds: "
"maybe you and your friend run a company together and certain funds should "
"only be spendable if you both agree."
msgstr ""

#: ../../wallets/electrum/advanced.rst:133
msgid ""
"Another one is security: one of the wallets can be on your main machine, "
"while the other one is on a offline machine. That way you make it very hard "
"for an attacker or malware to steal your coins."
msgstr ""

#: ../../wallets/electrum/advanced.rst:138
msgid "Create a pair of 2-of-2 wallets"
msgstr ""

#: ../../wallets/electrum/advanced.rst:140
msgid ""
"Each cosigner needs to do this: In the menu select **File > New**, then "
"select **Multi-signature wallet**. On the next screen, select 2 of 2."
msgstr ""

#: ../../wallets/electrum/advanced.rst:146
msgid "Selecting x of y signatures for a multi-signature wallet"
msgstr ""

#: ../../wallets/electrum/advanced.rst:148
msgid ""
"After generating and confirming your recovery seed, you will be shown the "
"xpub address for this wallet."
msgstr ""

#: ../../wallets/electrum/advanced.rst:153
msgid "xpub key of the first wallet"
msgstr ""

#: ../../wallets/electrum/advanced.rst:155
msgid ""
"After generating a seed (keep it safely!) you will need to provide the "
"master public key of the other wallet. Of course when you create the other "
"wallet, you put the master public key of the first wallet."
msgstr ""

#: ../../wallets/electrum/advanced.rst:162
msgid "Entering xpub from the second wallet in the first wallet"
msgstr ""

#: ../../wallets/electrum/advanced.rst:164
msgid ""
"You will need to do this in parallel for the two wallets. Note that you can "
"press cancel during this step, and reopen the file later."
msgstr ""

#: ../../wallets/electrum/advanced.rst:168
msgid "Receiving"
msgstr ""

#: ../../wallets/electrum/advanced.rst:170
msgid ""
"Check that both wallets generate the same set of Addresses. You can now send"
" to these **Addresses** (note they start with a “7”) with any wallet that "
"can send to P2SH Addresses."
msgstr ""

#: ../../wallets/electrum/advanced.rst:175
msgid "Sending"
msgstr ""

#: ../../wallets/electrum/advanced.rst:177
msgid ""
"To spend coins from a 2-of-2 wallet, two cosigners need to sign a "
"transaction collaboratively. To accomplish this, create a transaction using "
"one of the wallets (by filling out the form on the **Send** tab). After "
"signing, a window is shown with the transaction details."
msgstr ""

#: ../../wallets/electrum/advanced.rst:183
msgid ""
"The transaction now has to be sent to the second wallet. Several options are"
" available for this:"
msgstr ""

#: ../../wallets/electrum/advanced.rst:186
msgid "You can transfer the file on a USB stick"
msgstr ""

#: ../../wallets/electrum/advanced.rst:188
msgid ""
"You can save the partially signed transaction to a file (using the **Save** "
"button), transfer that to the machine where the second wallet is running "
"(via USB stick, for example) and load it there (using **Tools > Load "
"transaction > From file**)"
msgstr ""

#: ../../wallets/electrum/advanced.rst:193
msgid "You can use QR codes"
msgstr ""

#: ../../wallets/electrum/advanced.rst:195
msgid ""
"A button showing a QR code icon is also available. Clicking this button will"
" display a QR code containing the transaction, which can be scanned into the"
" second wallet (**Tools > Load Transaction > From QR Code**)"
msgstr ""

#: ../../wallets/electrum/advanced.rst:200
msgid ""
"With both of the above methods, you can now add the second signature to the "
"transaction (using the **Sign** button). It will then be broadcast to the "
"network."
msgstr ""

#: ../../wallets/electrum/advanced.rst:206
msgid "Sweep a paper wallet"
msgstr ""

#: ../../wallets/electrum/advanced.rst:208
msgid ""
"You may have received a paper wallet as a gift from another SmartCash user, "
"or previously stored one in a safe deposit box. Funds are swept from a "
":ref:`paper wallet <paper-wallets>` into a live wallet by importing its "
"`private key <http://bitzuma.com/posts /six-things-bitcoin-users-should- "
"know-about-private-keys/>`_, which is a long sequence of characters starting"
" with the number \"7\" or the capital letter \"X\". The example below "
"displays a private key (WIF format)."
msgstr ""

#: ../../wallets/electrum/advanced.rst:219
msgid ""
"Public address and associated private key produced by SmartCash Paper Wallet"
" Generator"
msgstr ""

#: ../../wallets/electrum/advanced.rst:222
msgid ""
"Funds from paper wallets are swept into an SmartCash Electrum Wallet by "
"creating a transaction using the private key and sending it to a new address"
" from your wallet. This is necessary because it is not possible to add new "
"public or private keys to an existing deterministic series of addresses "
"derived from a seed phrase."
msgstr ""

#: ../../wallets/electrum/advanced.rst:228
msgid ""
"Begin by selecting the **Wallet** > **Private Keys** > **Sweep** menu item. "
"The **Sweep private keys** dialog will appear, where you can paste your "
"private key(s). An unused address controlled by your SmartCash Electrum "
"wallet appears in the lower field, and can be changed by clicking the "
"**Address** button. Once you have pasted your private key, click the "
"**Sweep** button."
msgstr ""

#: ../../wallets/electrum/advanced.rst:238
msgid "Entering the private key"
msgstr ""

#: ../../wallets/electrum/advanced.rst:240
msgid ""
"SmartCash Electrum then prepares a transaction using the private key you "
"just imported to derive the public address for the transaction input and the"
" address from your wallet as the output, and signs the message. Click "
"**Broadcast** to enter the transaction on the blockchain. The balance will "
"then appear in your wallet under the specified address. The address you "
"swept is left with zero balance."
msgstr ""

#: ../../wallets/electrum/advanced.rst:249
msgid "Command line"
msgstr ""

#: ../../wallets/electrum/advanced.rst:251
msgid ""
"SmartCash Electrum has a powerful command line available when running under "
"Linux or macOS. This section will show you a few basic principles."
msgstr ""

#: ../../wallets/electrum/advanced.rst:255
msgid "Using the inline help"
msgstr ""

#: ../../wallets/electrum/advanced.rst:257
msgid "To see the list of SmartCash Electrum commands, type::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:261
msgid "To see the documentation for a command, type::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:266
msgid "Magic words"
msgstr ""

#: ../../wallets/electrum/advanced.rst:268
msgid ""
"The arguments passed to commands may be one of the following magic words: `!"
" ? : -`."
msgstr ""

#: ../../wallets/electrum/advanced.rst:270
msgid ""
"The exclamation mark `!` is a shortcut that means ‘the maximum amount "
"available’. Note that the transaction fee will be computed and deducted from"
" the amount. Example::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:276
msgid ""
"A question mark `?` means that you want the parameter to be prompted. "
"Example::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:281
msgid ""
"Use a colon `:` if you want the prompted parameter to be hidden (not echoed "
"in your terminal). Note that you will be prompted twice in this example, "
"first for the private key, then for your wallet password::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:287
msgid ""
"A parameter replaced by a smartcash `-` will be read from standard input (in"
" a pipe)::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:293
msgid "Aliases"
msgstr ""

#: ../../wallets/electrum/advanced.rst:295
msgid ""
"You can use DNS aliases in place of bitcoin addresses, in most commands::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:300
msgid "Formatting outputs using jq"
msgstr ""

#: ../../wallets/electrum/advanced.rst:302
msgid ""
"Command outputs are either simple strings or json structured data. A very "
"useful utility is the ‘jq’ program. Install it with::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:307
msgid "The following examples use it."
msgstr ""

#: ../../wallets/electrum/advanced.rst:310
msgid "Sign and verify message"
msgstr ""

#: ../../wallets/electrum/advanced.rst:312
msgid "We may use a variable to store the signature, and verify it::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:316
msgid "And::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:321
msgid "Show the values of your unspents"
msgstr ""

#: ../../wallets/electrum/advanced.rst:323
msgid ""
"The `listunspent` command returns a list of dict objects, with various "
"fields. Suppose we want to extract the `value` field of each record. This "
"can be achieved with the jq command::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:330
msgid "Select only incoming transactions from history"
msgstr ""

#: ../../wallets/electrum/advanced.rst:332
msgid "Incoming transactions have a positive ‘value’ field::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:337
msgid "Filter transactions by date"
msgstr ""

#: ../../wallets/electrum/advanced.rst:339
msgid ""
"The following command selects transactions that were timestamped after a "
"given date::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:345
msgid "Similarly, we may export transactions for a given time period::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:352
msgid "Encrypt and decrypt messages"
msgstr ""

#: ../../wallets/electrum/advanced.rst:354
msgid "First we need the public key of a wallet address::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:358
msgid "Encrypt::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:362
msgid "Decrypt::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:366
msgid ""
"Note: this command will prompt for the encrypted message, then for the "
"wallet password."
msgstr ""

#: ../../wallets/electrum/advanced.rst:370
msgid "Export private keys and sweep coins"
msgstr ""

#: ../../wallets/electrum/advanced.rst:372
msgid ""
"The following command will export the private keys of all wallet addresses "
"that hold some SmartCash::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:377
msgid ""
"This will return a list of lists of private keys. In most cases, you want to"
" get a simple list. This can be done by adding a jq filer, as follows::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:383
msgid ""
"Finally, let us use this list of private keys as input to the sweep "
"command::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:388
msgid "Using cold storage with the command line"
msgstr ""

#: ../../wallets/electrum/advanced.rst:390
msgid ""
"This section will show you how to sign a transaction with an offline "
"SmartCash Electrum wallet using the command line."
msgstr ""

#: ../../wallets/electrum/advanced.rst:394
msgid "Create an unsigned transaction"
msgstr ""

#: ../../wallets/electrum/advanced.rst:396
msgid ""
"With your online (watching-only) wallet, create an unsigned transaction::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:400
msgid ""
"The unsigned transaction is stored in a file named ‘unsigned.txn’. Note that"
" the –unsigned option is not needed if you use a watching-only wallet."
msgstr ""

#: ../../wallets/electrum/advanced.rst:404
msgid "You may view it using::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:409
msgid "Sign the transaction"
msgstr ""

#: ../../wallets/electrum/advanced.rst:411
msgid ""
"The serialization format of SmartCash Electrum contains the master public "
"key needed and key derivation used by the offline wallet to sign the "
"transaction. Thus we only need to pass the serialized transaction to the "
"offline wallet::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:418
msgid ""
"The command will ask for your password, and save the signed transaction in "
"‘signed.txn’."
msgstr ""

#: ../../wallets/electrum/advanced.rst:421
msgid "Broadcast the transaction"
msgstr ""

#: ../../wallets/electrum/advanced.rst:423
msgid "Send your transaction to the SmartCash network, using broadcast::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:427
msgid "If successful, the command will return the ID of the transaction."
msgstr ""

#: ../../wallets/electrum/advanced.rst:430
msgid "How to accept SmartCash on a website using SmartCash Electrum"
msgstr ""

#: ../../wallets/electrum/advanced.rst:432
msgid ""
"This tutorial will show you how to accept smartcash on a website with SSL "
"signed payment requests. It is updated for SmartCash Electrum 2.6."
msgstr ""

#: ../../wallets/electrum/advanced.rst:436
msgid "Requirements"
msgstr ""

#: ../../wallets/electrum/advanced.rst:438
msgid "A webserver serving static HTML"
msgstr ""

#: ../../wallets/electrum/advanced.rst:439
msgid "A SSL certificate (signed by a CA)"
msgstr ""

#: ../../wallets/electrum/advanced.rst:440
msgid "Electrum version >= 2.6"
msgstr ""

#: ../../wallets/electrum/advanced.rst:443
msgid "Create a wallet"
msgstr ""

#: ../../wallets/electrum/advanced.rst:445
msgid "Create a wallet on your web server::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:449
msgid ""
"You can also use a watching only wallet (restored from xpub), if you want to"
" keep private keys off the server. Once your wallet is created, start "
"SmartCash Electrum as a daemon::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:456
msgid "Add your SSL certificate to your configuration"
msgstr ""

#: ../../wallets/electrum/advanced.rst:458
msgid ""
"You should have a private key and a public certificate for your domain. "
"Create a file that contains only the private key::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:465
msgid "Set the path to your the private key file with setconfig::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:469
msgid ""
"Create another file that contains your certificate and the list of "
"certificates it depends on, up to the root CA. Your certificate must be at "
"the top of the list, and the root CA at the end::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:483
msgid "Set the `ssl_chain` path with setconfig::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:488
msgid "Configure a requests directory"
msgstr ""

#: ../../wallets/electrum/advanced.rst:490
msgid "This directory must be served by your webserver (eg Apache)::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:494
msgid ""
"By default, SmartCash Electrum will display local URLs, starting with "
"‘file://‘ In order to display public URLs, we need to set another "
"configuration variable, `url_rewrite`. For example::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:501
msgid "Create a signed payment request"
msgstr ""

#: ../../wallets/electrum/advanced.rst:520
msgid "This command returns a json object with two URLs:"
msgstr ""

#: ../../wallets/electrum/advanced.rst:522
msgid "`request_url` is the URL of the signed BIP70 request."
msgstr ""

#: ../../wallets/electrum/advanced.rst:523
msgid "`index_url` is the URL of a webpage displaying the request."
msgstr ""

#: ../../wallets/electrum/advanced.rst:525
msgid ""
"Note that request_url and index_url use the domain name we defined in "
"`url_rewrite`. You can view the current list of requests using the "
"`listrequests` command."
msgstr ""

#: ../../wallets/electrum/advanced.rst:530
msgid "Open the payment request page in your browser"
msgstr ""

#: ../../wallets/electrum/advanced.rst:532
msgid "Let us open `index_url` in a web browser."
msgstr ""

#: ../../wallets/electrum/advanced.rst:537
msgid "Payment request page in a web browser"
msgstr ""

#: ../../wallets/electrum/advanced.rst:539
msgid ""
"The page shows the payment request. You can open the smartcash: URI with a "
"wallet, or scan the QR code. The bottom line displays the time remaining "
"until the request expires."
msgstr ""

#: ../../wallets/electrum/advanced.rst:546
msgid "Wallet awaiting payment"
msgstr ""

#: ../../wallets/electrum/advanced.rst:548
msgid ""
"This page can already be used to receive payments. However, it will not "
"detect that a request has been paid; for that we need to configure "
"websockets."
msgstr ""

#: ../../wallets/electrum/advanced.rst:553
msgid "Add web sockets support"
msgstr ""

#: ../../wallets/electrum/advanced.rst:555
msgid "Get SimpleWebSocketServer from here::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:559
msgid "Set `websocket_server` and `websocket_port` in your config::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:564
msgid "And restart the daemon::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:569
msgid ""
"Now, the page is fully interactive: it will update itself when the payment "
"is received. Please notice that higher ports might be blocked on some "
"client’s firewalls, so it is more safe for example to reverse proxy "
"websockets transmission using standard 443 port on an additional subdomain."
msgstr ""

#: ../../wallets/electrum/advanced.rst:576
msgid "JSONRPC interface"
msgstr ""

#: ../../wallets/electrum/advanced.rst:578
msgid ""
"Commands to the SmartCash Electrum daemon can be sent using JSONRPC. This is"
" useful if you want to use SmartCash Electrum in a PHP script."
msgstr ""

#: ../../wallets/electrum/advanced.rst:581
msgid ""
"Note that the daemon uses a random port number by default. In order to use a"
" stable port number, you need to set the `rpcport` configuration variable "
"(and to restart the daemon)::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:587
msgid "With this setting, we can perform queries using curl or PHP. Example::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:591
msgid "Query with named parameters::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:595
msgid "Create a payment request::"
msgstr ""
